
import matplotlib.pyplot as plt
import seaborn as sns

# Population distribution
sns.histplot(city_Newdata['population_population_number_of_people'], kde=True)
plt.title('City Population Distribution')
plt.show()

# Waste treatment percentages by income group
waste_cols = ['waste_treatment_open_dump_percent', 'waste_treatment_recycling_percent']
city_Newdata.groupby('income_id')[waste_cols].mean().plot(kind='bar')
plt.title('Waste Treatment by Income Group')
plt.show()

city_counts = city_Newdata.groupby("region_id").size()
import matplotlib.pyplot as plt
city_counts.plot(kind='bar', color='skyblue', title='Count of Cities by Region')
plt.xlabel('Region')
plt.ylabel('Number of Cities')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import plotly.express as px
# Example: Regional Waste Treatment Visualization
fig = px.bar(city_Newdata, x='region_id', y='waste_treatment_open_dump_percent', color='income_id')
fig.show()

import plotly.express as px
# Example: Regional Waste Treatment Visualization
fig = px.bar(city_Newdata, x='region_id', y='waste_treatment_recycling_percent', color='income_id')
fig.show()

# Trend analysis for a specific metric
yearly_trend = city_com_codebook.groupby('year')['waste_treatment_open_dump_percent'].mean()
yearly_trend.plot()
plt.title('City Waste Treatment open_dump Trends Over Time')
plt.show()

# Trend analysis for a specific metric
yearly_trend = city_com_codebook.groupby('year')['waste_treatment_recycling_percent'].mean()
yearly_trend.plot()
plt.title('City Waste Treatment recycling Trends Over Time')
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns
# Load datasets
import pandas as pd
# Population distribution
sns.histplot(country_total_data['population_population_number_of_people'], kde=True)
plt.title('Country Population Distribution')
plt.show()

# Waste treatment percentages by income group
waste_cols = ['waste_treatment_open_dump_percent', 'waste_treatment_recycling_percent']
country_total_data.groupby('income_id')[waste_cols].mean().plot(kind='bar')
plt.title('Waste Treatment by Income Group')
plt.show()

import plotly.express as px
# Example: Regional Waste Treatment Visualization
fig = px.bar(country_total_data, x='region_id', y='waste_treatment_open_dump_percent', color='income_id')
fig.show()

import plotly.express as px
# Example: Regional Waste Treatment Visualization
fig = px.bar(country_total_data, x='region_id', y='waste_treatment_recycling_percent', color='income_id')
fig.show()

import matplotlib.pyplot as plt
# Convert the 'total_msw_total_msw_generated_tons_year' column to numeric type before using nlargest
country_total_data["total_msw_total_msw_generated_tons_year"] = pd.to_numeric(country_total_data["total_msw_total_msw_generated_tons_year"], errors='coerce')
# Filter the top 10 countries based on total waste generated
top_countries = country_total_data.nlargest(10, "total_msw_total_msw_generated_tons_year")
# Dynamically adjust the figure size based on the number of cities
plt.figure(figsize=(max(15, len(top_countries) / 2), 8))  # Adjust width dynamically
# Plot the bar chart
plt.bar(top_countries["country_name"], top_countries["total_msw_total_msw_generated_tons_year"], color='orange')
# Customize the plot
plt.xticks(rotation=90, fontsize=10)  # Rotate X-axis labels for better readability
plt.xlabel("Country Name", fontsize=14)
plt.ylabel("Total MSW Generated (tons/Year)", fontsize=14)
plt.title("Waste Generated by Top 10 Countries", fontsize=16)
plt.grid(axis='y', linestyle='--', alpha=0.7)
# Display the plot
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
# Convert the 'total_msw_total_msw_generated_tons_year' column to numeric type before using nsmallest
country_total_data["total_msw_total_msw_generated_tons_year"] = pd.to_numeric(
    country_total_data["total_msw_total_msw_generated_tons_year"], errors="coerce"
)
# Filter the bottom 10 countries based on total waste generated
bottom_countries = country_total_data.nsmallest(10, "total_msw_total_msw_generated_tons_year")
# Dynamically adjust the figure size based on the number of countries
plt.figure(figsize=(max(15, len(bottom_countries) / 2), 8))  # Adjust width dynamically
# Plot the bar chart
plt.bar(bottom_countries["country_name"], bottom_countries["total_msw_total_msw_generated_tons_year"], color="green")
# Customize the plot
plt.xticks(rotation=90, fontsize=10)  # Rotate X-axis labels for better readability
plt.xlabel("Country Name", fontsize=14)
plt.ylabel("Total MSW Generated (tons/Year)", fontsize=14)
plt.title("Waste Generated by Bottom 10 Countries", fontsize=16)
plt.grid(axis="y", linestyle="--", alpha=0.7)
# Display the plot
plt.show()


# Visualization: Bar chart for comparison
grouped_metrics.plot(kind="bar", figsize=(10, 6), color=["orange", "blue"])
plt.title("Comparison of Metrics by Income Group", fontsize=16)
plt.xlabel("Income Group", fontsize=14)
plt.ylabel("Average Value", fontsize=14)
plt.xticks(rotation=0)
plt.legend(["MSW per Capita", "GDP per Capita"], fontsize=12)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.show()

# Optional: Boxplot for distribution comparison
plt.figure(figsize=(10, 6))
sns.boxplot(data=country_total_data, x="income_id", y="msw per capita", palette="Set2") # Changed y to "msw per capita"
plt.title("MSW per Capita Distribution by Income Group", fontsize=16)
plt.xlabel("Income Group", fontsize=14)
plt.ylabel("MSW per Capita", fontsize=14)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.show()

# Trend analysis for a specific metric
yearly_trend = country_com_codebook.groupby('year')['waste_treatment_open_dump_percent'].mean()
yearly_trend.plot()
plt.title('Country Waste Treatment open_dump Trends Over Time')
plt.show()

# Trend analysis for a specific metric
yearly_trend = country_com_codebook.groupby('year')['waste_treatment_recycling_percent'].mean()
yearly_trend.plot()
plt.title('Country Waste Treatment recycling Trends Over Time')
plt.show()


# Optional: Visualization
import matplotlib.pyplot as plt

plt.scatter(merged_table["gdp per capita"], merged_table["msw per capita"], color='gold')
plt.title("Correlation")
plt.xlabel("GDP per Capita")
plt.ylabel("MSW per Capita")
plt.grid()
plt.show()
