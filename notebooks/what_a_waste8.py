# -*- coding: utf-8 -*-
"""what a waste8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QQc3a_ROeeb7PG2mMpOoObSWLZ2mQyso
"""

from google.colab import drive; drive.mount('/content/drive')

# Load datasets
import pandas as pd
city_data = pd.read_csv("/content/city_level_data_0_0.csv", encoding='cp1252')
# Added encoding='latin-1' to handle the different file encoding
city_codebook = pd.read_csv("/content/city_level_codebook_0.csv", encoding='latin-1')

city_data

# Check for missing values
print(city_data.isnull().sum())

city_Newdata = city_data[["iso3c","region_id","country_name","city_name","income_id","population_population_number_of_people","total_msw_total_msw_generated_tons_year","waste_treatment_open_dump_percent","waste_treatment_recycling_percent"]].drop_duplicates()
# This will correctly select the desired columns and create a copy in city_Newdata
city_Newdata

# Check for missing values
print(city_Newdata.isnull().sum())

waste_summary = city_Newdata.groupby('region_id')[['waste_treatment_open_dump_percent', 'waste_treatment_recycling_percent']].mean()
print(waste_summary)

import matplotlib.pyplot as plt
import seaborn as sns

# Population distribution
sns.histplot(city_Newdata['population_population_number_of_people'], kde=True)
plt.title('City Population Distribution')
plt.show()

# Waste treatment percentages by income group
waste_cols = ['waste_treatment_open_dump_percent', 'waste_treatment_recycling_percent']
city_Newdata.groupby('income_id')[waste_cols].mean().plot(kind='bar')
plt.title('Waste Treatment by Income Group')
plt.show()

city_counts = city_Newdata.groupby("region_id").size()
import matplotlib.pyplot as plt

city_counts.plot(kind='bar', color='skyblue', title='Count of Cities by Region')
plt.xlabel('Region')
plt.ylabel('Number of Cities')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import plotly.express as px

# Example: Regional Waste Treatment Visualization
fig = px.bar(city_Newdata, x='region_id', y='waste_treatment_open_dump_percent', color='income_id')
fig.show()

import plotly.express as px

# Example: Regional Waste Treatment Visualization
fig = px.bar(city_Newdata, x='region_id', y='waste_treatment_recycling_percent', color='income_id')
fig.show()

# Check for missing values
print(city_Newdata.isnull().sum())

city_total_data = city_Newdata.dropna(subset=["total_msw_total_msw_generated_tons_year"], inplace=False)
# Changed the first argument to subset=["total_msw_total_msw_generated_tons_year"]
# This will drop rows where "total_msw_total_msw_generated_tons_year" has missing values
city_total_data

city_total_data["total_msw_total_msw_generated_tons_year"] = pd.to_numeric(city_total_data["total_msw_total_msw_generated_tons_year"], errors='coerce')
city_total_data["population_population_number_of_people"] = pd.to_numeric(city_total_data["population_population_number_of_people"], errors='coerce')
city_total_data["msw per capita"] = city_total_data["total_msw_total_msw_generated_tons_year"] / city_total_data["population_population_number_of_people"]
city_total_data

# Check for missing values
print(city_total_data.isnull().sum())

city_total_data = city_total_data.dropna(subset=["total_msw_total_msw_generated_tons_year"], inplace=False)
# Changed the first argument to subset=["total_msw_total_msw_generated_tons_year"]
# This will drop rows where "total_msw_total_msw_generated_tons_year" has missing values
city_total_data

# Check for missing values
print(city_total_data.isnull().sum())

city_codebook

city_Newcodebook = city_codebook.iloc[:,0:8]
city_Year_codebook = city_Newcodebook.dropna(subset=["year"])
tonnes_data = city_Year_codebook[city_Year_codebook['units'] == 'tonnes/year']
city_Year_codebook['year'] = city_Year_codebook['year'].astype(int)
tonnes_data

import pandas as pd

# Example: Rename columns in `tonnes_data` to match `city_com_data`
tonnes_data.rename(columns={
    "regionID": "region_id",
    "incomeID": "income_id"
}, inplace=True)

# Perform the merge on common columns
merged_data = pd.merge(
    city_total_data,
    tonnes_data[["city_name", "year"]],  # Only keep necessary columns from tonnes_data
    how="left",  # Left join to keep all rows from city_com_data
    on="city_name"  # Merge on city_name
)

# Check the resulting table
merged_data

# Check for missing values
print(merged_data.isnull().sum())

# Drop rows with missing 'year'
city_com = merged_data.dropna(subset=["year","total_msw_total_msw_generated_tons_year"],inplace=False)

# Check the size of the resulting DataFrame
print(f"Original data size: {merged_data.shape}")
print(f"Filtered data size: {city_com.shape}")

# Verify if all 'year' values are now valid
print(city_com["year"].isnull().sum())  # Should print 0

# Check for missing values
print(city_com.isnull().sum())

# Drop rows where "year" is NaN
city_com_codebook = city_com.dropna(subset=["year"])

# Convert the "year" column to integers
city_com_codebook['year'] = city_com_codebook['year'].astype(int)
city_com_codebook

# Trend analysis for a specific metric
yearly_trend = city_com_codebook.groupby('year')['waste_treatment_open_dump_percent'].mean()
yearly_trend.plot()
plt.title('City Waste Treatment open_dump Trends Over Time')
plt.show()

# Trend analysis for a specific metric
yearly_trend = city_com_codebook.groupby('year')['waste_treatment_recycling_percent'].mean()
yearly_trend.plot()
plt.title('City Waste Treatment recycling Trends Over Time')
plt.show()

# Load datasets
country_data = pd.read_csv("/content/country_level_data.csv", encoding='cp1252')
# Added encoding='latin-1' to handle the different file encoding
country_codebook = pd.read_csv("/content/country_level_codebook.csv", encoding='latin-1')

# Check for missing values
print(country_data.isnull().sum())

# Drop rows with missing 'year'
country_Newdata = country_data[["iso3c","region_id","country_name","income_id","gdp","population_population_number_of_people","total_msw_total_msw_generated_tons_year","waste_treatment_open_dump_percent","waste_treatment_recycling_percent"]].drop_duplicates()

country_Newdata

# Check for missing values
print(country_Newdata.isnull().sum())

country_total_data = country_Newdata.dropna(subset=["total_msw_total_msw_generated_tons_year", "country_name"],inplace=False)
# Changed the first argument to subset=["total_msw_total_msw_generated_tons_year"]
# This will drop rows where "total_msw_total_msw_generated_tons_year" has missing values
country_total_data
country_total_data

print(country_total_data.isnull().sum())

waste_summary = country_total_data.groupby('region_id')[['waste_treatment_open_dump_percent', 'waste_treatment_recycling_percent']].mean()
print(waste_summary)

import matplotlib.pyplot as plt
import seaborn as sns
# Load datasets
import pandas as pd
# Population distribution
sns.histplot(country_total_data['population_population_number_of_people'], kde=True)
plt.title('Country Population Distribution')
plt.show()

# Waste treatment percentages by income group
waste_cols = ['waste_treatment_open_dump_percent', 'waste_treatment_recycling_percent']
country_total_data.groupby('income_id')[waste_cols].mean().plot(kind='bar')
plt.title('Waste Treatment by Income Group')
plt.show()

import plotly.express as px

# Example: Regional Waste Treatment Visualization
fig = px.bar(country_total_data, x='region_id', y='waste_treatment_open_dump_percent', color='income_id')
fig.show()

import plotly.express as px

# Example: Regional Waste Treatment Visualization
fig = px.bar(country_total_data, x='region_id', y='waste_treatment_recycling_percent', color='income_id')
fig.show()

# Convert the 'total_msw_total_msw_generated_tons_year' column to numeric type before using nlargest
country_total_data["total_msw_total_msw_generated_tons_year"] = pd.to_numeric(country_total_data["total_msw_total_msw_generated_tons_year"], errors='coerce')

# Filter the top 10 cities based on total waste generated
top_countries = country_total_data.nlargest(10, "total_msw_total_msw_generated_tons_year")

# Dynamically adjust the figure size based on the number of cities
plt.figure(figsize=(max(15, len(top_countries) / 2), 8))  # Adjust width dynamically

# Plot the bar chart
plt.bar(top_countries["country_name"], top_countries["total_msw_total_msw_generated_tons_year"], color='orange')

# Customize the plot
plt.xticks(rotation=90, fontsize=10)  # Rotate X-axis labels for better readability
plt.xlabel("Country Name", fontsize=14)
plt.ylabel("Total MSW Generated (tons/Year)", fontsize=14)
plt.title("Waste Generated by Top 10 Countries", fontsize=16)
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Display the plot
plt.show()

import matplotlib.pyplot as plt
import pandas as pd

# Convert the 'total_msw_total_msw_generated_tons_year' column to numeric type before using nsmallest
country_total_data["total_msw_total_msw_generated_tons_year"] = pd.to_numeric(
    country_total_data["total_msw_total_msw_generated_tons_year"], errors="coerce"
)

# Filter the bottom 10 countries based on total waste generated
bottom_countries = country_total_data.nsmallest(10, "total_msw_total_msw_generated_tons_year")

# Dynamically adjust the figure size based on the number of countries
plt.figure(figsize=(max(15, len(bottom_countries) / 2), 8))  # Adjust width dynamically

# Plot the bar chart
plt.bar(bottom_countries["country_name"], bottom_countries["total_msw_total_msw_generated_tons_year"], color="green")

# Customize the plot
plt.xticks(rotation=90, fontsize=10)  # Rotate X-axis labels for better readability
plt.xlabel("Country Name", fontsize=14)
plt.ylabel("Total MSW Generated (tons/Year)", fontsize=14)
plt.title("Waste Generated by Bottom 10 Countries", fontsize=16)
plt.grid(axis="y", linestyle="--", alpha=0.7)

# Display the plot
plt.show()

country_total_data["gdp per capita"] = country_total_data["gdp"] / country_total_data["population_population_number_of_people"]
country_total_data["msw per capita"] = country_total_data["total_msw_total_msw_generated_tons_year"] / country_total_data["population_population_number_of_people"]
country_total_data

# Group data by income group and compute average metrics
grouped_metrics = country_total_data.groupby("income_id")[["msw per capita", "gdp per capita"]].mean() # Use column names with spaces

# Display the result
print("Average Metrics by Income Group:\n", grouped_metrics)

# Visualization: Bar chart for comparison
grouped_metrics.plot(kind="bar", figsize=(10, 6), color=["orange", "blue"])
plt.title("Comparison of Metrics by Income Group", fontsize=16)
plt.xlabel("Income Group", fontsize=14)
plt.ylabel("Average Value", fontsize=14)
plt.xticks(rotation=0)
plt.legend(["MSW per Capita", "GDP per Capita"], fontsize=12)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.show()

# Boxplot for distribution comparison
plt.figure(figsize=(10, 6))
sns.boxplot(data=country_total_data, x="income_id", y="msw per capita", palette="Set2") # Changed y to "msw per capita"
plt.title("MSW per Capita Distribution by Income Group", fontsize=16)
plt.xlabel("Income Group", fontsize=14)
plt.ylabel("MSW per Capita", fontsize=14)
plt.grid(axis="y", linestyle="--", alpha=0.7)
plt.tight_layout()
plt.show()

print(country_total_data.isnull().sum())

country_codebook

print(country_codebook.isnull().sum())

country_Newcodebook = country_codebook.dropna(subset=["country_name","year"], inplace=False)
# Changed the first argument to subset=["total_msw_total_msw_generated_tons_year"]
# This will drop rows where "total_msw_total_msw_generated_tons_year" has missing values
country_Newcodebook

country_finalcodebook = country_Newcodebook.iloc[:,0:7]
country_finalcodebook

# Drop rows with missing 'year' and "country_name"
country_Year_codebook = country_finalcodebook.dropna(subset=["year","country_name"],inplace=False)
country_Year_codebook

print(country_Year_codebook.isnull().sum())

# Convert the "year" column to integers
country_Year_codebook['year'] = country_Year_codebook['year'].astype(int)

country_Year_codebook

# Filter rows based on the "units" column
tonnes_data1 = country_Year_codebook[country_Year_codebook['measurement'] == 'total_msw_total_msw_generated_tons_year']
tonnes_data1

print(tonnes_data1.isnull().sum())

import pandas as pd

# Perform the merge on common columns
country_com_codebook = pd.merge(
    country_total_data,
    tonnes_data1[["country_name", "year"]],  # Only keep necessary columns from tonnes_data
    how="left",  # Left join to keep all rows from city_com_data
    on="country_name"  # Merge on city_name
)

# Check the resulting table
country_com_codebook

# Check for missing values
print(country_com_codebook.isnull().sum())

# Drop rows where "year" is NaN
country_com_codebook = country_com_codebook.dropna(subset=["year"])

# Convert the "year" column to integers
country_com_codebook['year'] = country_com_codebook['year'].astype(int)

country_com_codebook

# Check for missing values
print(country_com_codebook.isnull().sum())

# Trend analysis for a specific metric
yearly_trend = country_com_codebook.groupby('year')['waste_treatment_open_dump_percent'].mean()
yearly_trend.plot()
plt.title('Country Waste Treatment open_dump Trends Over Time')
plt.show()

# Trend analysis for a specific metric
yearly_trend = country_com_codebook.groupby('year')['waste_treatment_recycling_percent'].mean()
yearly_trend.plot()
plt.title('Country Waste Treatment recycling Trends Over Time')
plt.show()

# Save the file to Google Drive
#merged_total_data.to_csv('/content/drive/My Drive/merged_total_data.csv',encoding='cp1252',index=False)

city_com_codebook.head()

city_com_codebook1 = city_com_codebook.iloc[:,[2,3,9]]
city_com_codebook1

country_com_codebook.head()

country_com_codebook1 = country_com_codebook.iloc[:,[2,9]]
country_com_codebook1

import pandas as pd

# Ensure the 'country_name' column exists in both tables
# Merge the tables on the 'country_name' column
merged_table = pd.merge(city_com_codebook1, country_com_codebook1, on="country_name", how="inner")

# Display the result
merged_table

# Check for missing values
print(merged_table.isnull().sum())

# Example Analysis: Correlation between GDP per capita and MSW per capita
correlation = merged_table["gdp per capita"].corr(merged_table["msw per capita"])
print(f"Correlation between GDP per capita and MSW per capita: {correlation}")

import matplotlib.pyplot as plt

plt.scatter(merged_table["gdp per capita"], merged_table["msw per capita"], color='gold')
plt.title("Correlation")
plt.xlabel("GDP per Capita")
plt.ylabel("MSW per Capita")
plt.grid()
plt.show()